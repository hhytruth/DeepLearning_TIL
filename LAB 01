DEEP LEARNING TIL


<LAB 01>TensorFlow의 설치및 기본적인 operations
-TENSORFLOW:
 data flow graph를 사용한 numerical computation를 위한 open source library(python 사용)
-DATA FLOW GRAPH:
 node: operations
 edges: data, data arrays(tensors) communicated between them
 
Check TF version
In [1]:
import tensorflow as tf
tf.__version__


Out[1]:
'1.0.0'
Hello TensorFlow!
In [2]:
# Create a constant op
# This op is added as a node to the default graph
hello = tf.constant("Hello, TensorFlow!")

# start a TF session
sess = tf.Session()

# run the op and get result
print(sess.run(hello))


b'Hello, TensorFlow!'


Tensors
In [3]:
3 # a rank 0 tensor; this is a scalar with shape []
[1. ,2., 3.] # a rank 1 tensor; this is a vector with shape [3]
[[1., 2., 3.], [4., 5., 6.]] # a rank 2 tensor; a matrix with shape [2, 3]
[[[1., 2., 3.]], [[7., 8., 9.]]] # a rank 3 tensor with shape [2, 1, 3]


Out[3]:
[[[1.0, 2.0, 3.0]], [[7.0, 8.0, 9.0]]]
Computational Graph
In [4]:
node1 = tf.constant(3.0, tf.float32)
node2 = tf.constant(4.0) # also tf.float32 implicitly
node3 = tf.add(node1, node2)


In [5]:
print("node1:", node1, "node2:", node2)
print("node3: ", node3)


node1: Tensor("Const_1:0", shape=(), dtype=float32) node2: Tensor("Const_2:0", shape=(), dtype=float32)
node3:  Tensor("Add:0", shape=(), dtype=float32)



In [6]:
sess = tf.Session()
print("sess.run(node1, node2): ", sess.run([node1, node2]))
print("sess.run(node3): ", sess.run(node3))


sess.run(node1, node2):  [3.0, 4.0]
sess.run(node3):  7.0



 -Placeholder
	feed_dict: 값을 넘겨줌
	->그래프를 만들어놓고 placeholder라는 노드를 만들고 값을 넘겨줄 수 있다..더         
 	효율적 

In [7]:
a = tf.placeholder(tf.float32)
b = tf.placeholder(tf.float32)
adder_node = a + b  # + provides a shortcut for tf.add(a, b)

print(sess.run(adder_node, feed_dict={a: 3, b: 4.5}))
print(sess.run(adder_node, feed_dict={a: [1,3], b: [2, 4]}))


7.5
[ 3.  7.]

-TensorFlow Mechanics

텐서플로우의 operations를 사용해 그래프를 그린다.
데이터를 넣어주고 그래프를 실행시킨다.(operation)
		sess.run(op,feed_dict={x:x_data})
      3. 그래프의 변수들을 업데이트시킨다.(그리고 값 리턴)

-Tensor
	모든 것이 텐서이다.
	기본적으로 array…

-Tensor Ranks, Shapes, and Types

[Ranks]
0 : Scalar : s=483
1 : Vector : v=[1.1, 2.2, 3.3]
2 : Matrix : m=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
3 : 3-Tensor : t=[[[2], [4], [6]],[8], [10], [12]], [14], [16], [18]]]
n : n-Tensor : …
…


[Types]

DT_FLOAT :  tf.float32(주로)
DT_DOUBLE : tf.float64
DT_INT8 : tf.int8
DT_INT16 : tf.int16
DT_INT32 : tf.int32(주로)
DT_INT64 : tf.int64
